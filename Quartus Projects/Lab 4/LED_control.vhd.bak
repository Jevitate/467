library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.std_logic_unsigned.all;



entity LED_control is
    port(
        clk            : in  std_logic;                         -- system clock
        reset          : in  std_logic;                         -- system reset
        PB             : in  std_logic;                         -- Pushbutton to change state  
        SW             : in  std_logic_vector(3 downto 0);      -- Switches that determine next state
        HS_LED_control : in  std_logic;                         -- Software is in control when asserted (=1)
        SYS_CLKs_sec   : in  std_logic_vector(31 downto 0);     -- Number of system clock cycles in one second
        Base_rate      : in  std_logic_vector(7 downto 0);      -- base transition time in seconds, fixed-point data type
        LED_reg        : in  std_logic_vector(7 downto 0);      -- LED register
        LED            : out std_logic_vector(7 downto 0)       -- LEDs on the DE10-Nano board
    );
end entity LED_control;



architecture LED_control_arch of LED_control is 
--flip flop
--PB_condition
--state machine


	type state_type is(s0, s1, s2, s3, s4);


	signal current_state, next_state : state_type;
	
	
	
	component Dflipflop
		port	(clock	: in std_logic;
				 reset	: in std_logic;
				 D			: in std_logic;
				 Q, Qn	: out std_logic);
	end component;
	
	
	

	
	
	

	begin
	
	
	
	STATE_MEMORY  :  process(clk,reset)
		
		begin
		
			if(reset = '0') then
				current_state <= s0;
			elsif(clk'event and clk = '1') then
				current_state <= next_state;
			end if;
	end process;
	
	
	
	NEXT_STATE_LOGIC  :  process(SW, PB)
		
		begin
		
			if(SW = "0000") and (PB = '1') then
				next_state <= s0;
			elsif(SW = "0001") and (PB = '1') then
				next_state <= s1;
			elsif(SW = "0010") and (PB = '1') then
				next_state <= s2;
			elsif(SW = "0011") and (PB = '1') then
				next_state <= s3;
			elsif(SW = "0100") and (PB = '1') then
				next_state <= s4;
			end if;
	
				
	end process;


end architecture;


